{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"date",
				"date_dash"
			],
			[
				"objet",
				"objects"
			],
			[
				"occ",
				"occurrence"
			],
			[
				"FOr",
				"ForeignKey"
			],
			[
				"occurren",
				"occurrence_list"
			],
			[
				"obje",
				"object_list"
			],
			[
				"occu",
				"occurrence_list"
			],
			[
				"occur",
				"occurrence_list"
			],
			[
				"Occu",
				"Occurrence"
			],
			[
				"book",
				"booking_email"
			],
			[
				"back",
				"background-color"
			],
			[
				"index",
				"index-departure"
			],
			[
				"jquer",
				"jquery-ui"
			],
			[
				"to",
				"tour_occurrence"
			],
			[
				"col",
				"col-sm-10"
			],
			[
				"Htt",
				"HttpResponseRedirect"
			],
			[
				"tour",
				"tour_occurrence"
			],
			[
				"this",
				"this_occurrence"
			],
			[
				"next",
				"next_occurrence"
			],
			[
				"hello",
				"hello1"
			],
			[
				"spot",
				"spots_free"
			],
			[
				"Occ",
				"OccurrenceReplacer"
			],
			[
				"pers",
				"persisted_occurrences"
			],
			[
				"",
				"spots_free"
			],
			[
				"pin",
				"print"
			],
			[
				"Http",
				"HttpRequest"
			],
			[
				"Ge",
				"get_occurrences"
			],
			[
				"qury",
				"query"
			],
			[
				"Date",
				"DateFilter"
			],
			[
				"sec",
				"select\tTag"
			],
			[
				"mod",
				"ModelForm"
			],
			[
				"get",
				"get_absolute_url"
			],
			[
				"user",
				"user_calendar"
			],
			[
				"use",
				"user"
			],
			[
				"modl",
				"models"
			],
			[
				"t",
				"tour_dates"
			],
			[
				"eve",
				"eventlist"
			],
			[
				"event",
				"event"
			],
			[
				"ob",
				"obj_1"
			],
			[
				"Occurence",
				"OccurrenceForm"
			],
			[
				"Gui",
				"GuideBookingForm"
			],
			[
				"get_",
				"get_queryset"
			],
			[
				"gu",
				"GuideBookingForm"
			],
			[
				"col-s",
				"col-sm-3"
			],
			[
				"o",
				"objects"
			],
			[
				"tours",
				"tours"
			],
			[
				"mode",
				"model"
			],
			[
				"Even",
				"Event"
			],
			[
				"fil",
				"filter"
			],
			[
				"Ev",
				"EventForm"
			],
			[
				"f",
				"fields"
			],
			[
				"guide",
				"guide_name"
			],
			[
				"c",
				"calendar"
			],
			[
				"u",
				"ul\tTag"
			],
			[
				"padd",
				"padding-top"
			],
			[
				"padding",
				"padding-bottom"
			],
			[
				"backgr",
				"background"
			],
			[
				"Guide",
				"Guide"
			],
			[
				"di",
				"div\tTag"
			],
			[
				"Tour",
				"tourSize"
			],
			[
				"ge",
				"get_object"
			],
			[
				"tou",
				"tourSize"
			],
			[
				"Post",
				"POST"
			],
			[
				"p",
				"print"
			],
			[
				"last",
				"last_name"
			],
			[
				"tex",
				"text-decoration-color"
			],
			[
				"gui",
				"guide_name"
			],
			[
				"gi",
				"guide_name"
			],
			[
				"first",
				"first_name"
			],
			[
				"Ba",
				"BASE_DIR"
			],
			[
				"mar",
				"margin-left"
			],
			[
				"pad",
				"padding"
			],
			[
				"docu",
				"documents"
			],
			[
				"rev",
				"reverse_lazy"
			],
			[
				"docume",
				"Document"
			],
			[
				"doc",
				"document_id"
			],
			[
				"d",
				"Document"
			],
			[
				"bor",
				"border-radius"
			],
			[
				"co",
				"color"
			],
			[
				"mrg",
				"margin-bottom"
			],
			[
				"font",
				"font-size"
			],
			[
				"mo",
				"models"
			],
			[
				"Ch",
				"DOCUMENT_CHOICES"
			],
			[
				"Do",
				"Document"
			],
			[
				"Doc",
				"DocumentPostAdmin"
			],
			[
				"sav",
				"save_model"
			],
			[
				"htt",
				"Http404"
			],
			[
				"BA",
				"BASE_DIR"
			],
			[
				"STA",
				"STATIC_ROOT"
			],
			[
				"margin",
				"margin-top"
			],
			[
				"h",
				"HttpResponseRedirect"
			],
			[
				"http",
				"Http404"
			],
			[
				"logi",
				"login_required"
			],
			[
				"document",
				"DocumentListView"
			],
			[
				"background-c",
				"background-color"
			],
			[
				"bott",
				"border-bottom"
			],
			[
				"backg",
				"background-position"
			],
			[
				"filte",
				"FilterMixin"
			],
			[
				"paddin",
				"padding"
			],
			[
				"url",
				"get_absolute_url"
			],
			[
				"ali",
				"text-align"
			],
			[
				"text-a",
				"text-align"
			],
			[
				"max",
				"max-height"
			],
			[
				"ST",
				"STATIC_ROOT"
			],
			[
				"pro",
				"product_offerings"
			],
			[
				"m",
				"max_length"
			],
			[
				"Scho",
				"ScholarshipForm"
			],
			[
				"refer",
				"referral"
			],
			[
				"Re",
				"Referral"
			],
			[
				"Ref",
				"ReferralForm"
			],
			[
				"Sch",
				"ScholarshipForm"
			],
			[
				"R",
				"ReferralForm"
			],
			[
				"Mo",
				"Model"
			],
			[
				"val",
				"value"
			],
			[
				"form",
				"form"
			],
			[
				"ref",
				"referButton"
			],
			[
				"Refer",
				"referButton"
			],
			[
				"marg",
				"margin-top"
			],
			[
				"las",
				"lastname"
			],
			[
				"fist",
				"firstname"
			],
			[
				"def",
				"default"
			],
			[
				"Get",
				"get_object_or_404"
			],
			[
				"in",
				"instance"
			],
			[
				"margi",
				"margin-top"
			],
			[
				"text",
				"text-align"
			],
			[
				"Job",
				"Job"
			],
			[
				"model",
				"models"
			],
			[
				"Model",
				"Model_List"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "from django.shortcuts import render, get_object_or_404, redirect\nfrom django.core.mail import send_mail, BadHeaderError\nfrom django.contrib.auth.decorators import login_required\nfrom django.http import HttpResponseRedirect\nfrom django.conf import settings\nfrom datetime import datetime, timezone\nfrom django import forms\nfrom schedule.views import Event\nimport datetime\n\nfrom django.core.exceptions import ImproperlyConfigured\nfrom django.contrib import messages\nfrom django.db.models import Q\nfrom django.http import Http404, HttpResponse\nfrom django.views.generic.detail import DetailView\nfrom django.views.generic.list import ListView\nfrom django.views.generic.edit import CreateView\n\nfrom django.utils import timezone\nfrom django_filters import FilterSet, CharFilter, NumberFilter, DateFilter, DateTimeFilter\nfrom django.core.paginator import Paginator, EmptyPage, PageNotAnInteger\n\nfrom django.contrib.auth.models import User\nimport os\nimport string\n\nimport json\nfrom schedule.models.events import Event, EventRelation, Occurrence\nfrom .serializers import GuideSerializer\nfrom rest_framework import generics\n\nfrom .models import Guide\nfrom .forms import GuideForm, GuideBookingForm, OccurrenceForm, OccurrenceBookingForm\n\n\nfrom dateutil.relativedelta import relativedelta\n\nfrom io import StringIO\nimport csv\n\n\nfrom schedule.models.calendars import Calendar\nimport pytz\n\nfrom itertools import chain\n\n# Create your views here.\n\n\ndef home(request):\n\tguides = Guide.objects.all()[:6]\n\tcontext = {\"guides\": guides}\n\ttemplate = 'home.html'\n\treturn render(request, template, context)\n\n#__________________________________________________________________\n\n\ndef create_tour_guide(request):\n\tform = GuideForm(request.POST or None, request.FILES or None)\n\tif form.is_valid():\n\t\tinstance = form.save(commit=False)\n\t\tinstance.guide_name = request.user\n\t\tinstance.timestamp = timezone.now().date()\n\t\tinstance.save()\n\t\t# message success\n\t\t# messages.success(request, \"Successfully Created\")\n\t\treturn HttpResponseRedirect(instance.get_absolute_url())\n\tcontext = {\n\t\t\"form\": form,\n\t}\n\treturn render(request, \"tour/create_tour_guide.html\", context)\n\n#____________________________________________________________________\n\n\ndef guide_profile(request, calendar_slug=None):\n\tguide_profile = get_object_or_404(Guide, slug=slug)\n\tcontext = {\"guide_profile\": guide_profile,}\n\ttemplate = \"tour/guide_profile.html\"\n\treturn render(request, template, context)\n\n\n\ndef guide_profile_update(request, pk=None):\n\n\tguide_profile = get_object_or_404(Guide, pk=pk)\n\tform = GuideForm(request.POST or None, request.FILES or None, instance=guide_profile)\n\tif form.is_valid():\n\n\t\tguide_profile = form.save(commit=False)\n\t\tguide_profile.save()\n\t\t#messages.success(request, \"<a href='#'>Item</a> Saved\", extra_tags='html_safe')\n\t\treturn HttpResponseRedirect(guide_profile.get_absolute_url())\n\n\tcontext = {\n\t\t\"guide_profile\": guide_profile,\n\t\t\"form\":form,\n\t}\n\treturn render(request, \"tour/create_tour_guide.html\", context)\n\n#____________________________________________________________\n\n\nclass GuideFilterForm(FilterSet):\n\tliving = CharFilter(name='living', lookup_type='icontains', distinct=False)\n\tlanguage = CharFilter(name='language', lookup_type='icontains', distinct=False)\n\n\t\n\tclass Meta:\n\t\tmodel = Guide\n\t\tfields = ['language', 'living']\n\n\n\n\nclass FilterMixin(object):\n\tfilter_class = None\n\tsearch_ordering_param = \"ordering\"\n\n\tdef get_queryset(self, *args, **kwargs):\n\t\ttry:\n\t\t\tqs = super(FilterMixin, self).get_queryset(*args, **kwargs)\n\t\t\treturn qs\n\t\texcept:\n\t\t\traise ImproperlyConfigured(\"You must have a queryset in order to use the FilterMixin\")\n\n\tdef get_context_data(self, *args, **kwargs):\n\t\tcontext = super(FilterMixin, self).get_context_data(*args, **kwargs)\n\t\tqs = self.get_queryset()\n\t\tordering = self.request.GET.get(self.search_ordering_param)\n\t\tif ordering:\n\t\t\tqs = qs.order_by(ordering)\n\t\tfilter_class = self.filter_class\n\t\tif filter_class:\n\t\t\tf = filter_class(self.request.GET, queryset=qs)\n\n\t\t\t#____________________IN THE WORKS FOR QUERYING_______\n\t\t\tdate = self.request.GET['start']\n\t\t\tdate_dash = date.replace('/', '-')\n\t\t\toccurrence_list = Occurrence.objects.filter(start__icontains=date_dash[:5])\n\t\t\t#occurrence_list = Occurrence.objects.filter(event__creator__exact='talia')\n\t\t\tobject_list = list(chain(f, occurrence_list))\n\t\t\t#____________________IN THE WORKS FOR QUERYING_______\n\t\t\tcontext[\"object_list\"] = object_list\n\t\treturn context\n\n#____________________________________________________________\n\n\nclass GuideListView(FilterMixin, ListView):\n\tmodel = Guide\n\tqueryset = Guide.objects.all()\n\tfilter_class = GuideFilterForm\n\n\tdef get_context_data(self, *args, **kwargs):\n\t\tcontext = super(GuideListView, self).get_context_data(*args, **kwargs)\n\t\tcontext[\"now\"] = timezone.now()\n\t\tcontext[\"query\"] = self.request.GET.get(\"q\") #None\n\t\tcontext[\"filter_form\"] = GuideFilterForm(data=self.request.GET or None)\n\n\t\tqueryset = Guide.objects.get_queryset()\n\t\t\n        #______________________IN THE WORKS FOR PAGINATION__________________\n\t\tpaginator = Paginator(queryset, 5)\n\t\tpage = self.request.GET.get('page') \n\t\ttry: \n\t\t\tdocument = paginator.page(page) \n\t\texcept PageNotAnInteger:\n\t\t\tdocument = paginator.page(1) \n\t\texcept EmptyPage:\n\t\t\tdocument = paginator.page(paginator.num_pages)\n\t\tcontext['document'] = document\t\t\n        #______________________IN THE WORKS FOR PAGINATION__________________\n\n\n\t\treturn context\n\n\t\n\tdef get_current_path(request):\n\t\treturn {'current_path': request.get_full_path()}\n\n\tdef get_queryset(self, *args, **kwargs):\n\t\tqs = super(GuideListView, self).get_queryset(*args, **kwargs)\n\t\tquery = self.request.GET.get(\"q\")\n\t\tif query:\n\t\t\tqs = self.model.objects.filter(\n\t\t\t\tQ(language__icontains=query) |\n\t\t\t\tQ(living__icontains=query)\n\t\t\t\t)\n\t\treturn qs\n\n\n\nclass OccurenceFilterForm(FilterSet):\n\tstart = DateFilter(lookup_type='icontains', name='start', distinct=False)\n\tliving = CharFilter(lookup_type='icontains', name='guide__living', distinct=False)\n\tlanguage = CharFilter(lookup_type='icontains', name='guide__language', distinct=False)\n\t\n\tclass Meta:\n\t\tmodel = Occurrence\n\t\tfields = ['start', 'guide']\n\n\n\nclass ProductFilter(FilterSet):\n\ttitle = CharFilter(name='title', lookup_type='icontains', distinct=True)\n\tcategory = CharFilter(name='categories__title', lookup_type='icontains', distinct=True)\n\tcategory_id = CharFilter(name='categories__id', lookup_type='icontains', distinct=True)\n\tmin_price = NumberFilter(name='variation__price', lookup_type='gte', distinct=True) # (some_price__gte=somequery)\n\tmax_price = NumberFilter(name='variation__price', lookup_type='lte', distinct=True)\n\tclass Meta:\n\t\tmodel = Product\n\t\tfields = [\n\t\t\t'min_price',\n\t\t\t'max_price',\n\t\t\t'category',\n\t\t\t'title',\n\t\t\t'description',\n\t\t]\n\n\n\n\n\t\t\tqs = self.model.objects.filter(\n\t\t\t\tQ(title__icontains=query) |\n\t\t\t\tQ(description__icontains=query)\n\t\t\t\t)\n\t\t\ttry:\n\t\t\t\tqs2 = self.model.objects.filter(\n\t\t\t\t\tQ(price=query)\n\t\t\t\t)\n\t\t\t\tqs = (qs | qs2).distinct()\n\t\t\texcept:\n\t\t\t\tpass\n\t\treturn qs\n\n\n\n\n\nclass OccurenceFilterMixin(object):\n\tfilter_class = None\n\tsearch_ordering_param = \"ordering\"\n\n\tdef get_queryset(self, *args, **kwargs):\n\t\ttry:\n\t\t\tqs = super(OccurenceFilterMixin, self).get_queryset(*args, **kwargs)\n\t\t\treturn qs\n\n\t\texcept:\n\t\t\traise ImproperlyConfigured(\"You must have a queryset in order to use the OccurenceFilterMixin\")\n\n\tdef get_context_data(self, *args, **kwargs):\n\t\tcontext = super(OccurenceFilterMixin, self).get_context_data(*args, **kwargs)\n\t\tqs = self.get_queryset()\n\t\tordering = self.request.GET.get(self.search_ordering_param)\n\t\tif ordering:\n\t\t\tqs = qs.order_by(ordering)\n\t\tfilter_class = self.filter_class\n\t\tif filter_class:\n\t\t\tf = filter_class(self.request.GET, queryset=qs)\n\t\t\tcontext[\"object_list\"] = f\n\t\treturn context\n\n\nclass OccurrenceListView(OccurenceFilterMixin, ListView):\n\tmodel = Occurrence\n\tqueryset = Occurrence.objects.all()\n\tfilter_class = OccurenceFilterForm\n\n\tdef get_context_data(self, *args, **kwargs):\n\t\tcontext = super(OccurrenceListView, self).get_context_data(*args, **kwargs)\n\t\tcontext[\"query\"] = self.request.GET.get(\"q\") #None\n\t\tcontext[\"filter_form\"] = OccurenceFilterForm(data=self.request.GET or None)\n\t\tqueryset = Occurrence.objects.get_queryset()\n\t\t\n\t\treturn context\n\n\n\tdef get_queryset(self, *args, **kwargs):\n\t\tqs = super(OccurrenceListView, self).get_queryset(*args, **kwargs)\n\t\tquery = self.request.GET.get(\"q\")\n\t\tif query:\n\t\t\tqs = self.model.objects.filter(\n\t\t\t\tQ(start__icontains=query))\n\t\ttry:\t\t\n\t\t\tqs2 = self.model.objects.filter(\n\t\t\tQ(language=query) |\n\t\t\tQ(living=query)\n\t\t\t\t)\n\t\t\tqs = (qs | qs2).distinct()\n\t\texcept:\n\t\t\tpass\n\t\treturn qs\n\n\n#_______________________IN THE WORKS FOR EMAIL BOOKING________________\n\n\ndef booking_email(user_name, user_email, bookings):\n\ttitle = 'Contact Us'\n\ttitle_align_center = True\n\n\t#user_email = request.user.email\n\tuser_name = user_name\n\tsubject = 'Free Walking Tour Guide Booking'\n\tform_message = 'You have booked %s spot/s for this date from this time to that time. Please show up at least 30 minutes early to this place' %(bookings)\n\tfrom_email = settings.EMAIL_HOST_USER\n\ttotal_bookings = bookings\n\tto_email = [from_email, 'hardiet@oregonstate.edu']\n\tcontact_message = \"%s: %s via %s\"%( \n\t\t\tuser_name,\n\t\t\ttotal_bookings, \n\t\t\tfrom_email)\n\tsome_html_message = str(form_message)\n\t\t\n\n\t\t\n\n\ttry:\n\t\tsend_mail(subject, \n\t\tcontact_message, \n\t\tfrom_email, \n\t\tto_email, \n\t\thtml_message=some_html_message,\n\t\tfail_silently=True)\n\t\treturn HttpResponseRedirect('/')\n\texcept BadHeaderError:\n\t\treturn HttpResponse('Invalid header found.')\n\n\tcontext = {\n\t\t\"form\": form,\n\t\t\"title\": title,\n\t\t\"title_align_center\": title_align_center,\n\t}\n\n\treturn render(request, \"forms.html\", context)\n\n\n#_______________________IN THE WORKS FOR EMAIL BOOKING________________\n\n\n\n\n#_____________________IN THE WORKS________________________________________________________\n\n\nclass GuideDetailView(DetailView):\n\tmodel = Guide\n\n\tdef get_context_data(self, *args, **kwargs):\n\t\tcontext = super(GuideDetailView, self).get_context_data(*args, **kwargs)\n\t\tform = OccurrenceForm\n\t\tcontext[\"instance\"] = self.get_object()\n\t\tcontext[\"current_user\"] = self.request.user\n\t\tcontext['form'] = GuideBookingForm()\n\t\tcontext['guide_tours'] = OccurrenceForm(guide=self.get_object().pk)\n\t\tcontext['tours_dates'] = OccurrenceForm(guide=self.get_object().pk)\n\t\tcontext['other_form'] = OccurrenceBookingForm()\n\n\t\t\n\t\t#________CREATES OR GETS TOUR GUIDES CALANDER____________\n\t\tuser = self.get_object().guide_name\n\t\tuser_calendar = Calendar.objects.get_or_create_calendar_for_object(user, name = str(self.get_object().guide_name))\n\t\tcontext['calendar'] = user_calendar.get_absolute_url\n\t\t#________CREATES OR GETS TOUR GUIDES CALANDER____________\n\n\n\t\t#________GETS OCCURENCES FOR FOR THE USERS CALANDER____________\n\t\ttours = EventRelation.objects.get_events_for_object(user)\n\t\tcontext['tours_list'] = EventRelation.objects.get_events_for_object(user)\n\t\tnow = datetime.datetime.now()\n\t\ttry:\n\t\t\tdates = self.request.POST.get['living']\n\t\texcept:\n\t\t\tpass\n\t\ttourlist = []\n\t\tfor tour in tours:\n\t\t\ttourlist.append(tour.get_occurrences(\\\n\t\t\t\tpytz.utc.localize(datetime.datetime(now.year, now.month, now.day)),\\\n\t\t\t\t#datetime.datetime(2013, 1, 5, 9, 0, tzinfo=pytz.utc),\n\t\t\t\tpytz.utc.localize(datetime.datetime(now.year, 8, 15,))\\\n\t\t\t\t))\n\t\tcontext['tours'] = tourlist\n\t\t#________GETS OCCURENCES FOR FOR THE USERS CALANDER____________\n\t\tfor tour in tourlist:\n\t\t\tfor occurrence in tour:\n\t\t\t\tif occurrence.DoesNotExist:\n\t\t\t\t\toccurrence.save()\n\t\t\t\telse:\n\t\t\t\t\tpass\n\n\n\t\t\n\t\treturn context\n\n\tdef get_current_path(request):\n\t\treturn {'current_path': request.get_full_path()}\n\n\n\tdef post(self, request, *args, **kwargs):\n\t\tuser = self.get_object().guide_name\n\t\tself.status_form = GuideBookingForm(self.request.POST or None)\n\t\tif self.status_form.is_valid():\n\t\t\trequest.POST = request.POST.copy()\n\t\t\tspots_free = int(request.POST['spots_free'])\n\t\t\ttour_choosen = request.POST['tour']\n\n\t\t\toccurrence_list = []\n\n\t\t\tf = StringIO(tour_choosen)\n\t\t\treader = csv.reader(f, delimiter=',')\n\t\t\tfor row in reader:\n\t\t\t\toccurrence_list.append(row)\n\n\t\t\tyear = int(occurrence_list[0][0])\n\t\t\tmonth = int(occurrence_list[0][1])\n\t\t\tday = int(occurrence_list[0][2])\n\t\t\thour = int(occurrence_list[0][3])\n\t\t\tminute = int(occurrence_list[0][4])\n\t\t\tsecond = int(occurrence_list[0][5])\n\n\n\t\t\tbooking_email(request.user, request.user.email, spots_free)\n\n\n\t\t\ttours = EventRelation.objects.get_events_for_object(user)\n\t\t\tfor tour in tours:\n\t\t\t\ttour_occurrence = tour.get_occurrence(pytz.utc.localize(datetime.datetime(year, month, day, hour, minute, second)))\n\t\t\t\ttour_occurrence.spots_free -= spots_free\n\t\t\t\ttour_occurrence.save()\n\t\t\t\treturn HttpResponseRedirect('/1')\n\n\t\telse:\n\t\t\treturn super(GuideDetailView, self).post(request, *args, **kwargs)\n\n\n\n\n#_______IN THE WORKS FOR REST_FRAMEWORK___________________\nclass GuideDetail(generics.RetrieveUpdateDestroyAPIView):\n    queryset = Guide.objects.all()\n    serializer_class = GuideSerializer\n#_______IN THE WORKS FOR REST_FRAMEWORK___________________",
			"file": "src/tour/views.py",
			"file_size": 12117,
			"file_write_time": 131437072404290101,
			"settings":
			{
				"buffer_size": 12978,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/schedule/templates/schedule/occurrence_list.html",
			"settings":
			{
				"buffer_size": 9398,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/templates/home.html",
			"settings":
			{
				"buffer_size": 24441,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "Packages/Python/Python.sublime-build",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				"Syntax Check"
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 686.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"Set Syntax: YAML"
			],
			[
				"css",
				"Snippet: New Class"
			]
		],
		"width": 686.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/taylo/Desktop/pretiumtours/src",
		"/C/Users/taylo/Desktop/pretiumtours/src/schedule",
		"/C/Users/taylo/Desktop/pretiumtours/src/schedule/templates",
		"/C/Users/taylo/Desktop/pretiumtours/src/schedule/templates/schedule",
		"/C/Users/taylo/Desktop/pretiumtours/src/templates"
	],
	"file_history":
	[
		"/C/Users/taylo/Desktop/pretiumtours/src/schedule/templates/schedule/occurrence_list.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/tour/templates/tour/guide_list.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/templates/home.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/tour/templates/tour/guide_detail.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/schedule/models/events.py",
		"/C/Users/taylo/Desktop/pretiumtours/src/tour/models.py",
		"/C/Users/taylo/Desktop/pretiumtours/src/tour/migrations/__init__.py",
		"/C/Users/taylo/Desktop/pretiumtours/src/schedule/migrations/__init__.py",
		"/C/Users/taylo/Desktop/pretiumtours/src/tour/migrations/0012_auto_20170630_1518.py",
		"/C/Users/taylo/Desktop/pretiumtours/src/templates/base.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/tour/forms.py",
		"/C/Users/taylo/Desktop/pretiumtours/src/tour/urls.py",
		"/C/Users/taylo/Desktop/pretiumtours/src/tour/templates/tour/occurrence_list.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/farmtofamily/urls.py",
		"/C/Users/taylo/Desktop/pretiumtours/src/tour/templates/tour/event_list.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/tour/views.py",
		"/C/Users/taylo/Desktop/pretiumtours/src/farmtofamily/settings.py",
		"/C/Users/taylo/Desktop/pretiumtours/src/tour/serializers.py",
		"/C/Users/taylo/Desktop/pretiumtours/src/static/css/custom.css",
		"/C/Users/taylo/Desktop/pretiumtours/src/schedule/utils.py",
		"/C/Users/taylo/Desktop/pretiumtours/src/schedule/settings.py",
		"/C/Users/taylo/Desktop/pretiumtours/src/schedule/views.py",
		"/C/Users/taylo/Desktop/pretiumtours/src/templates/navbar.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/review/templates/review/review_form.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/tour/templates/tour/tour_reservation_email.txt",
		"/C/Users/taylo/Desktop/pretiumtours/src/review/templates/review/review_detail.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/templates/registration/logout.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/templates/registration/password_change_form.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/templates/registration/password_reset_done.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/templates/registration/password_reset_form.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/templates/registration/registration_form.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/review/templates/review/review_list.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/templates/registration/login.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/static/js/script.js",
		"/C/Users/taylo/Desktop/pretiumtours/src/static/js/core.min.js",
		"/C/Users/taylo/Desktop/pretiumtours/src/manage.py",
		"/C/Users/taylo/Desktop/pretiumtours/src/farmtofamily/wsgi.py",
		"/C/Users/taylo/Desktop/pretiumtours/src/templates/base_working.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/templates/head_css.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/templates/footer.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/static/css/style.css",
		"/C/Users/taylo/Desktop/pretiumtours/src/review/templates/review/review_confirm_delete.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/schedule/templates/schedule/create_event.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/components/bower_components/jquery-timepicker/jquery.ui.timepicker.js",
		"/C/Users/taylo/Desktop/pretiumtours/src/components/bower_components/jquery-ui/ui/widgets/datepicker.js",
		"/C/Users/taylo/Desktop/pretiumtours/src/static/js/jquery-ui-datepicker.js",
		"/C/Users/taylo/Desktop/pretiumtours/src/farmtofamily/assets/fullcalendar.js",
		"/C/Users/taylo/Desktop/pretiumtours/src/components/bower_components/fullcalendar/dist/fullcalendar.js",
		"/C/Users/taylo/Desktop/pretiumtours/src/bower_components/jquery-timepicker-wvega/jquery.timepicker.js",
		"/C/Users/taylo/Desktop/pretiumtours/src/static/js/custom.js",
		"/C/Users/taylo/Desktop/pretiumtours/src/static/js/jquery.timePicker.js",
		"/C/Users/taylo/Desktop/pretiumtours/src/components/bower_components/bootstrap/dist/css/bootstrap.css",
		"/C/Users/taylo/Desktop/pretiumtours/src/schedule/templates/schedule/calendar_week.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/components/bower_components/jquery/dist/jquery.js",
		"/C/Users/taylo/Desktop/pretiumtours/src/templates/javascript.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/static/static_dirs/js/custom.js",
		"/C/Users/taylo/Desktop/pretiumtours/src/schedule/admin.py",
		"/C/Users/taylo/Desktop/pretiumtours/src/components/bower_components/jquery-ui/jquery-ui.js",
		"/C/Users/taylo/Desktop/pretiumtours/src/schedule/templates/schedule/calendar_month.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/reservations/views.py",
		"/C/Users/taylo/Desktop/pretiumtours/src/reservations/templates/calendar.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/components/bower_components/jquery/dist/core.js",
		"/C/Users/taylo/Desktop/pretiumtours/src/reservations/static/css/calendar.css",
		"/C/Users/taylo/Desktop/pretiumtours/src/components/bower_components/jquery-ui/ui/minified/form.js",
		"/C/Users/taylo/Desktop/pretiumtours/src/static/static_dirs/css/style.css",
		"/C/Users/taylo/Desktop/pretiumtours/src/reservations/static/js/ui.coffee",
		"/C/Users/taylo/Desktop/pretiumtours/src/reservations/static/js/javascripts/ui.js",
		"/C/Users/taylo/Desktop/pretiumtours/src/templates/home_working.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/static/css/bootstrap.min.css",
		"/C/Users/taylo/Desktop/pretiumtours/src/schedule/templates/schedule/calendar_tri_month.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/schedule/templates/schedule/_daily_table.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/reservations/models.py",
		"/C/Users/taylo/Desktop/pretiumtours/src/reservations/templates/email_new.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/reservations/__init__.py",
		"/C/Users/taylo/Desktop/pretiumtours/src/reservations/admin.py",
		"/C/Users/taylo/Desktop/pretiumtours/src/.gitignore",
		"/C/Users/taylo/Desktop/pretiumtours/src/reservations/tests.py",
		"/C/Users/taylo/Desktop/pretiumtours/src/reservations/urls.py",
		"/C/Users/taylo/Desktop/pretiumtours/src/tour/templates/tour/guidelist_working.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/schedule/templates/base.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/components/bower_components/jquery-ui/composer.json",
		"/C/Users/taylo/Desktop/pretiumtours/src/templates/base/css.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/templates/base/js.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/schedule/templates/fullcalendar_modal.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/schedule/templates/schedule/_dialogs.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/schedule/templates/schedule/occurrence.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/static/static_dirs/js/core.min.js",
		"/C/Users/taylo/Desktop/pretiumtours/src/tour/templatetags/__init__.py",
		"/C/Users/taylo/Desktop/pretiumtours/src/tour/templatetags/tour_extras.py",
		"/C/Users/taylo/Desktop/pretiumtours/src/schedule/templates/schedule/calendar.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/schedule/templates/schedule/delete_event.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/schedule/templates/schedule/calendar_day.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/schedule/templates/schedule/event.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/schedule/models/calendars.py",
		"/C/Users/taylo/Desktop/pretiumtours/src/schedule/templates/schedule/calendar_list.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/schedule/templates/schedule/edit_occurrence.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/tour/templates/tour/guide_thumbnail.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/review/models.py",
		"/C/Users/taylo/Desktop/pretiumtours/src/schedule/templates/fullcalendar_script.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/review/admin.py",
		"/C/Users/taylo/Desktop/pretiumtours/src/schedule/templates/fullcalendar.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/schedule/templates/schedule/calendar_year.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/schedule/templates/schedule/calendar_compact_month.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/requirements.txt",
		"/C/Users/taylo/Desktop/pretiumtours/src/schedule/templates/profiles/schedule.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/happenings/templates/happenings/middle.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/happenings/templates/happenings/event_month_list.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/happenings/templates/happenings/event_detail.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/happenings/templates/happenings/event_day_list.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/schedule/templates/schedule/_event_options.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/tour/templates/tour/create_tour_guide.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/templates/index.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/templates/404.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/tour/templates/tour/landing_page.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/templates/navbar_working.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/static/horny/baby.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/static/static_dirs/css/custom.css",
		"/C/Users/taylo/Desktop/pretiumtours/src/static/static_dirs/css/bootstrap.min.css",
		"/C/Users/taylo/Desktop/pretiumtours/src/templates/registration/login_working.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/templates/registration/registration_form_working.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/tour/static/tour/style.css",
		"/C/Users/taylo/Desktop/pretiumtours/src/static/css/main.css",
		"/C/Users/taylo/Desktop/pretiumtours/src/tour/static/farm/style.css",
		"/C/Users/taylo/Desktop/pretiumtours/src/templates/registration/password_reset_form_working.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/static/static_dirs/css/footer-static-bottom.css",
		"/C/Users/taylo/Desktop/pretiumtours/src/schedule/templates/schedule/cancel_occurrence.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/tour/templates/tour/guide_profile.html",
		"/C/Users/taylo/Desktop/pretiumtours/src/tour/templates/tour/base.html"
	],
	"find":
	{
		"height": 58.0
	},
	"find_in_files":
	{
		"height": 176.0,
		"where_history":
		[
			"C:\\Users\\taylo\\Desktop\\pretiumtours\\src\\",
			"C:\\Users\\taylo\\Desktop\\pretiumtours\\src\\PretiumTourSite",
			"C:\\Users\\taylo\\Desktop\\pretiumtours\\",
			"C:\\Users\\taylo\\Desktop\\pretiumtours\\src",
			"C:\\Users\\taylo\\Desktop\\ecommerce\\src",
			"C:\\Users\\taylo\\Desktop\\freeosu\\src",
			"",
			"C:\\Users\\taylo\\Desktop\\freeosu\\src",
			"<current file>",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"Event",
			"hardiet",
			"tourSize",
			"tour",
			"guide",
			"__init__",
			"get_event",
			"gte_event",
			"requestSite",
			"guideimage",
			"Guide",
			"_set",
			"filter_form",
			"_set",
			"get_events_for_object",
			"GuideBookingForm",
			"tourSize",
			"tour_size",
			"_get_occurrence_list",
			"object_list",
			"book tour",
			"amazing tour",
			"language",
			"in the works for per",
			"in the workds for per",
			"kevin",
			"check_edit",
			"check_ediy",
			"check_deedit",
			"check",
			"check_edit_permission",
			"tours-single",
			"index",
			"href",
			"parallax",
			"RDParallax",
			"preti",
			"farmtofamily",
			"get_",
			"rd-parallax",
			"materialdesignicons.css.map",
			"timepicker",
			"bootstrapDateTimePicker",
			"timepicker",
			"core.min.js",
			"api",
			"book tour",
			"fullcalendar",
			"event=self",
			"print",
			"with ",
			"Occurrence",
			"objects.get",
			"print",
			"spots",
			"reservation",
			"get_reservation",
			"get_occurrence",
			"create_post",
			"csrfSafemeth",
			"x7f",
			"x7",
			"materialdesignicons",
			"guidebookingform",
			"BookingFormSet",
			"EventForm",
			"uitotop",
			"UItoTop",
			"rdParallax",
			"reParalax",
			"post-text",
			"post-form",
			"BookingFormSet",
			"reservation_spots_total",
			"reservation_spots",
			"reservation_spots_t",
			"reservation_spots_total",
			"ReservationDay",
			"print",
			"works for",
			"reservation_spots",
			"current",
			"calendar-nav",
			".defaults",
			"spots_free",
			"width",
			"datepicker",
			"get_form",
			"filterset",
			"filter",
			"print",
			"httprequest",
			"booking",
			"mergedic",
			"mergedict",
			"RESERVATION_SPOTS_TOTAL ",
			"{{instance.events}}",
			"EventRelationManager",
			"guidefilterform",
			"demos/sty",
			"css/material",
			"moments",
			"script",
			"jquery",
			"core",
			"materialdesign",
			"user-01",
			"{% sta",
			"input grou",
			"1.12",
			"jquery-ui.min",
			"user-01",
			"src",
			"do you want to edit this",
			"padding",
			"\">\n",
			"tomato",
			"script",
			"border: 1px",
			"border",
			"book Tour",
			"all",
			"modal",
			"src",
			"user-01",
			"src",
			"start",
			"\">\n"
		],
		"highlight": false,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"pretiumtours",
			"",
			"freeosu",
			"farmtofamily"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": false
	},
	"folders":
	[
		{
			"path": "C:\\Users\\taylo\\Desktop\\pretiumtours\\src"
		}
	],
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/tour/views.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12978,
						"regions":
						{
						},
						"selection":
						[
							[
								6684,
								6692
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 4367.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/schedule/templates/schedule/occurrence_list.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9398,
						"regions":
						{
						},
						"selection":
						[
							[
								174,
								174
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1242.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/templates/home.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 24441,
						"regions":
						{
						},
						"selection":
						[
							[
								4003,
								4003
							]
						],
						"settings":
						{
							"syntax": "Packages/HTML/HTML.sublime-syntax",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 690.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 33.0
	},
	"input":
	{
		"height": 55.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 174.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 875.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"C:\\Users\\taylo\\Desktop\\ecommerce\\ecommerce2.sublime-project"
			]
		],
		"width": 837.0
	},
	"select_symbol":
	{
		"height": 686.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 686.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 399.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
